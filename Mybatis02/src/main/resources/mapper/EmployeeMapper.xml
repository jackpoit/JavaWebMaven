<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woniuxy.mapper.EmployeeMapper">

    <!--添<insert>,删<delete>,改<update>,查<select>的标签
        id="方法名"
            parameterType="参数的类型"  面试:Mybatis如何传参的
            parameterType="封装的对象的类的全限定名"   [简单类型]返回的时候
            resultMap="" :最完整的ORM映射           [复杂类型]

    -->

    <!--    1.int add(Employee employee);//添加员工对象-->
    <insert id="add" parameterType="com.woniuxy.entity.Employee" useGeneratedKeys="true" keyColumn="id"
            keyProperty="id">
        INSERT INTO t_emp(tno, `name`, gender, birthday, title, salary, manager_id, dept_id, image)
        VALUE (#{tno},#{name},#{gender},#{birthday},#{title},#{salary},#{managerId},#{deptId},#{imagePath})
    </insert>
    <!--keyColumn列名  keyProperty 对象属性名 resultType返回类型-->
    <!--    <insert id="add" parameterType="com.woniuxy.entity.Employee">-->
    <!--        <selectKey keyColumn="id" keyProperty="id" resultType="int">-->
    <!--            SELECT LAST_INSERT_ID()-->
    <!--        </selectKey>-->
    <!--        INSERT INTO t_emp(tno,`name`,gender,birthday,title,salary,manager_id,dept_id,image)-->
    <!--        VALUE(#{tno},#{name},#{gender},#{birthday},#{title},#{salary},#{managerId},#{deptId},#{imagePath})-->
    <!--    </insert>-->


    <!-- 2.int addList(List<Employee> list);//插入一个员工集合-->
    <!--插入复杂参数时可以不写  -->
    <insert id="addList">
        INSERT INTO t_emp(tno,`name`,gender,birthday,title,salary,manager_id,dept_id,image)VALUES
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.tno},#{emp.name},#{emp.gender},#{emp.birthday},#{emp.title},#{emp.salary},#{emp.managerId},#{emp.deptId},#{emp.imagePath})
        </foreach>
    </insert>

    <!--3.int deleteByPrimaryKey(int id); //根据主键来删除员工对象-->
    <delete id="deleteByPrimaryKey" parameterType="int">
        DELETE
        FROM t_emp
        WHERE id = #{value}
    </delete>

    <!--4.int deleteByIds(int...ids);//根据多个id来删除-->
    <delete id="deleteByIds">
        DELETE FROM t_emp WHERE id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <!--5.int update(Employee employee);//更新员工对象-->
    <update id="update" parameterType="com.woniuxy.entity.Employee">
        UPDATE t_emp
        <set>   <!--去掉后面多余的','-->
            <if test="tno!=null and tno !=''">
                tno=#{tno},
            </if>
            <if test="name!=null and name !=''">
                name=#{name},
            </if>
            <if test="gender!=null and gender !=''">
                gender=#{gender},
            </if>
            <if test="birthday!=null">
                birthday=#{birthday},
            </if>
            <if test="title!=null and title !=''">
                title=#{title},
            </if>
            <if test="salary!=null">
                salary=#{salary},
            </if>
            <if test="managerId!=null">
                manager_id=#{managerId},
            </if>
            <if test="deptId!=null">
                dept_id=#{deptId},
            </if>
            <if test="imagePath!=null and imagePath !=''">
                image=#{imagePath},
            </if>
        </set>
        WHERE id = #{id}
    </update>
    <!--    <update id="update" parameterType="com.woniuxy.entity.Employee">-->
    <!--        UPDATE t_emp-->
    <!--        SET tno=#{tno},-->
    <!--            name=#{name},-->
    <!--            gender=#{gender},-->
    <!--            birthday=#{birthday},-->
    <!--            title=#{title},-->
    <!--            salary=#{salary},-->
    <!--            manager_id=#{managerId},-->
    <!--            dept_id=#{deptId},-->
    <!--            image=#{imagePath}-->
    <!--        WHERE id = #{id}-->
    <!--    </update>-->


    <!--    引入一个sql片段-->
    <sql id="baseColumn">
        id,tno,name,gender,birthday,title,salary,manager_id,dept_id,image
    </sql>

    <!--    重点:以后若遇到复杂的对象类型时:优先使用resultMap 体现了[ORM思想]-->
    <resultMap id="baseMap" type="com.woniuxy.entity.Employee">
        <id column="id" property="id"/>
        <result column="tno" property="tno"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="birthday" property="birthday"/>
        <result column="title" property="title"/>
        <result column="salary" property="salary"/>
        <result column="manager_id" property="managerId"/>
        <result column="dept_id" property="deptId"/>
        <result column="image" property="imagePath"/>
    </resultMap>

    <!--6.Employee findById(int id); //根据id查询指定的员工对象-->
    <select id="findById" parameterType="int" resultMap="baseMap">
        SELECT
        <include refid="baseColumn"/>
        FROM t_emp WHERE id=#{value}
    </select>

    <!--7.List<Employee> findAll();//查询所有员工对象-->
    <select id="findAll" resultMap="baseMap">
        SELECT
        <include refid="baseColumn"/>
        FROM t_emp
    </select>

    <!--8.List<String> findNames();//查询所有员工的姓名-->
    <select id="findNames" resultType="string">
        SELECT name FROM t_emp WHERE name is not null
    </select>

    <!--9.HashMap<String,Object> findNameAndTitle(); //返回HashMap<列名,值>-->
    <select id="findNameAndTitle" resultType="hashmap">
        SELECT name,title FROM t_emp WHERE name is not null
    </select>

    <!--10.List<Employee> findLikeName();//模糊查询-->
    <select id="findLikeName" resultMap="baseMap">
        SELECT
        <include refid="baseColumn"/>
        FROM t_emp
        WHERE name LIKE CONCAT('%',#{keyword},'%')
    </select>

    <!--11.List<Employee> findLimit(@Param("kw") String keyword ,@Param("start") int start,@Param("num") int num);//模糊查询-->
    <select id="findLimit" resultMap="baseMap">
        SELECT
        <include refid="baseColumn"/>
        FROM t_emp
        WHERE name LIKE CONCAT('%',#{keyword},'%')
        LIMIT #{start},#{num}
    </select>

    <!--12.long count(String keyword);//查询个数-->
    <select id="count" resultType="long">
        SELECT COUNT(*) FROM t_emp WHERE name LIKE CONCAT('%',#{keyword},'%')
    </select>

</mapper>
